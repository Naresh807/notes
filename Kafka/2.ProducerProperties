Default properties on local

    bootstrap.servers = [127.0.0.1:9092]
    key.serializer = class org.apache.kafka.common.serialization.StringSerializer
    value.serializer = class org.apache.kafka.common.serialization.StringSerializer

    
    acks = 1  [0=no acks  | 1=leader acks(default) | all=replica ack (must be used in conjunction with min.insync.replicas)]
    min.insync.replicas=2 [implies that at least 2 brokers that are ISR(inlcuding leader) must respond that they have data]
    retries = 2147483647  [ default is 0 from <=v2.0, 2147483647 for >v2.0 ]
	retry.backoff.ms = 100 [Frquency of retry]
    delivery.timeout.ms = 120000 [(2 mins)timeout till kafka will retry]
    max.in.flight.requests.per.connection = 5 [how many producer request can be made parallel to a sindle broker]

    enable.idempotence = true [will set idempotence producer, Kafka enable producer request id which can be identified by kafka 
	                           and eliminate duplicate]
                 Kafka >= 0.11
                    enable.idempotence=true (producer level) + min.insync.replicas=2(broker/topic level)
                        . Implies acks=all, retries=MAX_INT, max.in.flight.requests.per.connection=1 if kafka = 0.11 or 5 if kafka >= 1.0
                        . while keeping order gurantee with imporved performance
    
    compression.type = none ['none' (default), 'gzip', 'lz4', 'snappy' (lz4 & snappy is preferred one)]
    linger.ms = 0 [No. of millisecond a producer is willing to wait before sending a batch out]


	batch.size = 16384
	buffer.memory = 33554432
	client.dns.lookup = use_all_dns_ips
	client.id = producer-1
	
	connections.max.idle.ms = 540000
	
	interceptor.classes = []
	internal.auto.downgrade.txn.commit = false
	
	max.block.ms = 60000
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metadata.max.idle.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	security.providers = null
	send.buffer.bytes = 131072
	socket.connection.setup.timeout.max.ms = 30000
	socket.connection.setup.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2]
	ssl.endpoint.identification.algorithm = https
	ssl.engine.factory.class = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.certificate.chain = null
	ssl.keystore.key = null
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLSv1.2
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.certificates = null
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null