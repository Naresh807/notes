@Configuration
//@EnableKafka
public class KafkaConfiguration {

  	@Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        
        return factory;
    }
	
	@Bean
	public ConsumerFactory<String, String> consumerFactory(){
		Map<String,Object> consumerProperties = new HashMap<>();
		consumerProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");
		consumerProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		consumerProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		consumerProperties.put(ConsumerConfig.GROUP_ID_CONFIG, "Tweets_Spring_Consumer_Group");
		return new DefaultKafkaConsumerFactory<String, String> (consumerProperties);
		
	}
}
@Component
@Slf4j
public class TweetsConsumer {
	
	@KafkaListener(topics = {"twitter_tweets"})
	public void onMessage(ConsumerRecord< String, String> record) {
		log.info("Consumer Record : {} ", record);
	}
}

