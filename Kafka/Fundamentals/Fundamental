
https://medium.com/@stephane.maarek/the-kafka-api-battle-producer-vs-consumer-vs-kafka-connect-vs-kafka-streams-vs-ksql-ef584274c1e

### Installation : https://codingnconcepts.com/post/apache-kafka-installation/#kafka-installation-on-windows
 ZooKeeper Start : zookeeper-server-start.bat E:\kafka\config\zookeeper.properties
 Kafka Start : kafka-server-start.bat E:\kafka\config\server.properties
 to run exectable jar :java -jar -Dserver.port=8081 E:/eclipse-workspace/spring-suite/workspace/Naresh1/tweetsConsumer/target/tweetsConsumer-0.0.1-SNAPSHOT.jar

Topics: a particular stream of data
 . Similiar to a table in the database (without constraints)
 . You can have as many topics as you want
 . A topic is identified by its name

 Topics are split into partitions
  . Each partition is ordered
  . Each message within a partition gets an incrementtal id, called off set 

Brokers
  . A kafa cluster is composed of multiple brokers (servers)
  . Each broker is identified with its ID(integer)
  . Each broker contains certain topic partition
  . After connecting to any broker (called a bootstrap broker), you will be connected to the entire cluster

Topic replication
  . Topics should have a replication factor > (usually between 2 and 3)
  . This way if a broker is down, another broker can serve the data

 Concept of Leader for a partition
  . At any time only one broker can be leader for a given partition
  . Only that leader can receive and serve data for a partition
  . The other brokers will synchronize the data
  . Therefore each partition has one leader and multiple ISR (in-sync replica)





